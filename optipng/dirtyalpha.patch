--- src/opngoptim.c	2009-05-18 04:48:00.000000000 +0100
+++ src/opngoptim.c	2010-01-31 02:39:03.000000000 +0000
@@ -994,6 +994,8 @@
          reductions &= ~OPNG_REDUCE_BIT_DEPTH;
       if (options->nc)
          reductions &= ~OPNG_REDUCE_COLOR_TYPE;
+      if (options->nd)
+         reductions &= ~OPNG_REDUCE_DIRTY_ALPHA;
       if (options->np)
          reductions &= ~OPNG_REDUCE_PALETTE_ALL;
       if (opng_info.status & INPUT_HAS_DIGITAL_SIGNATURE)
--- src/opngreduc.c	2008-05-10 23:21:00.000000000 +0100
+++ src/opngreduc.c	2010-01-31 02:39:03.000000000 +0000
@@ -1119,6 +1119,69 @@
       usage_map[info_ptr->background.index] = 1;
 }
 
+/*
+ * Remove RGB components or transparent pixels in RGB+alpha images.
+ * The function returns OPNG_REDUCE_DIRTY_ALPHA if any pixels were cleared.
+ */
+png_uint_32 /* PRIVATE */
+opng_reduce_dirty_alpha(png_structp png_ptr, png_infop info_ptr)
+{
+   png_uint_32 result = OPNG_REDUCE_NONE;
+   png_bytepp row_ptr;
+   png_bytep sample_ptr, alpha_row;
+   png_uint_32 height, width, channels, i, j;
+   unsigned int color_type;
+
+   png_debug(1, "in opng_reduce_dirty_transparency\n");
+   
+   if (info_ptr->bit_depth != 8)
+      return OPNG_REDUCE_NONE;  /* nothing is done in this case */
+   
+   color_type = info_ptr->color_type;
+   OPNG_ASSERT(!(info_ptr->color_type & PNG_COLOR_MASK_PALETTE));
+   
+   row_ptr   = info_ptr->row_pointers;
+   height    = info_ptr->height;
+   width     = info_ptr->width;
+   channels  = info_ptr->channels;
+   alpha_row = (png_bytep)png_malloc(png_ptr, width);
+   
+   /* Search for transparent pixels. */
+   for (i = 0; i < height; ++i, ++row_ptr)
+   {
+      sample_ptr = *row_ptr;
+      opng_get_alpha_row(png_ptr, info_ptr, *row_ptr, alpha_row);
+      if (color_type & PNG_COLOR_MASK_COLOR)
+      {
+         for (j = 0; j < width; ++j, sample_ptr += channels)
+         {
+            if (alpha_row[j] == 0)
+            {
+               sample_ptr[0] = 0;
+               sample_ptr[1] = 0;
+               sample_ptr[2] = 0;
+               result = OPNG_REDUCE_DIRTY_ALPHA;
+            }  
+         }
+      }
+      else  /* grayscale */
+      {
+         for (j = 0; j < width; ++j, sample_ptr += channels)
+         {
+            if (alpha_row[j] == 0)
+            {
+               sample_ptr[0] = 0;
+               result = OPNG_REDUCE_DIRTY_ALPHA;
+            }
+         }
+      }
+   }
+   
+   png_free(png_ptr, alpha_row);
+   return result;
+}
+
+
 
 /*
  * Reduce the palette (only the fast method is implemented).
@@ -1306,7 +1369,7 @@
    png_uint_32 reductions)
 {
    unsigned int color_type;
-   png_uint_32 result;
+   png_uint_32 result = 0;
 
    png_debug(1, "in opng_reduce_image_type\n");
 
@@ -1331,8 +1394,14 @@
 
    /* The reductions below must be applied in the given order. */
 
+   if ((color_type == PNG_COLOR_TYPE_RGB_ALPHA || 
+        color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
+       && (reductions & OPNG_REDUCE_DIRTY_ALPHA)
+      )
+      result |= opng_reduce_dirty_alpha(png_ptr, info_ptr);
+    
    /* Try to reduce the high bits and color/alpha channels. */
-   result = opng_reduce_bits(png_ptr, info_ptr, reductions);
+   result |= opng_reduce_bits(png_ptr, info_ptr, reductions);
 
    /* Try to reduce the palette image. */
    if (color_type == PNG_COLOR_TYPE_PALETTE &&
--- src/opngreduc.h	2008-05-10 23:21:00.000000000 +0100
+++ src/opngreduc.h	2010-01-31 02:39:03.000000000 +0000
@@ -83,6 +83,8 @@
                                                 from PLTE and tRNS */
 #define OPNG_REDUCE_PALETTE_FAST     0x0200  /* remove trailing sterile entries
                                                 from PLTE and tRNS */
+#define OPNG_REDUCE_DIRTY_ALPHA      0x0400  /* zero RGB components of 
+                                                transparent pixels */
 #define OPNG_REDUCE_ANCILLARY        0x1000
 
 #define OPNG_REDUCE_BIT_DEPTH  \
@@ -98,6 +100,6 @@
 
 #define OPNG_REDUCE_ALL  \
    (OPNG_REDUCE_BIT_DEPTH | OPNG_REDUCE_COLOR_TYPE | \
-    OPNG_REDUCE_PALETTE_ALL | OPNG_REDUCE_ANCILLARY)
+    OPNG_REDUCE_PALETTE_ALL | OPNG_REDUCE_ANCILLARY | OPNG_REDUCE_DIRTY_ALPHA)
 
 #endif /* OPNG_IMAGE_REDUCTIONS_SUPPORTED */
--- src/optipng.c	2009-05-18 04:48:00.000000000 +0100
+++ src/optipng.c	2010-01-31 02:39:03.000000000 +0000
@@ -112,6 +112,7 @@
    "    -nb\t\t\tno bit depth reduction\n"
    "    -nc\t\t\tno color type reduction\n"
    "    -np\t\t\tno palette reduction\n"
+   "    -nd\t\t\tno dirty alpha transparency cleaning\n"
 #if 0  /* metadata optimization is not implemented */
    "    -nm\t\t\tno metadata optimization\n"
 #endif
@@ -288,7 +289,6 @@
     return 1;
 }
 
-
 /** Command line parsing **/
 static void
 parse_args(int argc, char *argv[])
@@ -365,6 +365,10 @@
         {
             options.np = 1;
         }
+        else if (strcmp(opt, "nd") == 0)
+        {
+            options.nd = 1;
+        }
         else if (strcmp(opt, "nz") == 0)
         {
             options.nz = 1;
--- src/optipng.h	2009-05-18 04:48:00.000000000 +0100
+++ src/optipng.h	2010-01-31 02:39:03.000000000 +0000
@@ -31,7 +31,7 @@
     int full;
     int interlace;
     int keep;
-    int nb, nc, np, nz;
+    int nb, nc, np, nz, nd;
     int preserve;
     int quiet;
     int simulate;
--- src/proginfo.h	2009-05-17 19:20:00.000000000 +0100
+++ src/proginfo.h	2010-01-31 02:39:03.000000000 +0000
@@ -1,5 +1,5 @@
 #define PROGRAM_NAME        "OptiPNG"
 #define PROGRAM_DESCRIPTION "Advanced PNG optimizer"
-#define PROGRAM_VERSION     "0.6.3"
+#define PROGRAM_VERSION     "0.6.3 + dirtyalpha patch"
 #define PROGRAM_COPYRIGHT   "Copyright (C) 2001-2009 Cosmin Truta"
 #define PROGRAM_URI         "http://optipng.sourceforge.net/"
Common subdirectories: src/scripts and src/scripts
Common subdirectories: src/xtra and src/xtra
