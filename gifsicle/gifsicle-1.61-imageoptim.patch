diff --git a/src/dmalloc.c b/src/dmalloc.c
index f84549e..e85d8d7 100644
--- a/src/dmalloc.c
+++ b/src/dmalloc.c
@@ -11,7 +11,7 @@ typedef struct bucket {
 #define NBUCK 5779
 static bucket *buckets[NBUCK];
 static int event_number;
-static FILE *verbose_out = 0;
+#define verbose_out 0
 
 size_t dmalloc_live_memory;
 
@@ -38,7 +38,7 @@ debug_malloc_id(size_t k, const char *file, int line)
   p = (void *)(((char *)p) + sizeof(bucket));
   /* memset(p, 99, b->size); */
   if (verbose_out)
-    fprintf(verbose_out, "%5d: %p +%-7d (%s:%d) ++  %ld\n", event_number,
+    fprintf(verbose_out, "%5d: %p +%-7ld (%s:%d) ++  %ld\n", event_number,
 	    p, b->size, file, line, (long) dmalloc_live_memory);
   event_number++;
   return p;
@@ -171,7 +171,7 @@ dmalloc_report(void)
 {
   int i;
   bucket *b;
-  fprintf(stderr, "dmalloc: %d bytes allocated\n", dmalloc_live_memory);
+  fprintf(stderr, "dmalloc: %ld bytes allocated\n", dmalloc_live_memory);
   for (i = 0; i < NBUCK; i++)
     for (b = buckets[i]; b; b = b->next)
       fprintf(stderr, "dmalloc: %p +%-7ld (%s:%d)\n",
@@ -183,8 +183,4 @@ dmalloc_report(void)
 void
 dmalloc_verbose(const char *out_name)
 {
-  if (out_name)
-    verbose_out = fopen(out_name, "w");
-  else
-    verbose_out = stdout;
 }
diff --git a/src/gifsicle.c b/src/gifsicle.c
index 516f0ca..a89fe23 100644
--- a/src/gifsicle.c
+++ b/src/gifsicle.c
@@ -697,7 +697,7 @@ input_stream(const char *name)
   def_frame = old_def_frame;
 
   if (unoptimizing)
-    if (!Gif_FullUnoptimize(gfs, GIF_UNOPTIMIZE_SIMPLEST_DISPOSAL)) {
+    if (0) {
       static int context = 0;
       warning("'%s' is too complex to unoptimize", name);
       if (!context) {
@@ -1280,16 +1280,7 @@ main(int argc, char *argv[])
   dmalloc_verbose("fudge");
 #endif
 
-  /* Yep, I'm an idiot.
-     GIF dimensions are unsigned 16-bit integers. I assume that these
-     numbers will fit in an 'int'. This assertion tests that assumption.
-     Really I should go through & change everything over, but it doesn't
-     seem worth my time. */
-  {
-    uint16_t m = 0xFFFFU;
-    int i = m;
-    assert(i > 0 && "configuration/lameness failure! bug the author!");
-  }
+
 
   while (1) {
     int opt = Clp_Next(clp);
diff --git a/src/gifwrite.c b/src/gifwrite.c
index a687b65..9fc4066 100644
--- a/src/gifwrite.c
+++ b/src/gifwrite.c
@@ -304,6 +304,8 @@ write_compressed_data(uint8_t **img, unsigned width, unsigned height,
 	  next_node->suffix = suffix;
 	  next_node->child.s = 0;
 
+          if (work_node) {
+
 	  /* link next_node into work_node's set of children */
 	  if (work_node->type == TABLE_TYPE)
 	    work_node->child.m[suffix] = next_node;
@@ -324,6 +326,7 @@ write_compressed_data(uint8_t **img, unsigned width, unsigned height,
 
 	/* Output the current code. */
 	output_code = work_node->code;
+          }
 	work_node = &gfc->nodes[suffix];
 	work_depth = 1;
 	goto found_output_code;
diff --git a/src/quantize.c b/src/quantize.c
index 6c91104..60352b3 100644
--- a/src/quantize.c
+++ b/src/quantize.c
@@ -101,7 +101,7 @@ histogram(Gif_Stream *gfs, int *nhist_store)
 {
   Gif_Histogram hist;
   Gif_Color *linear;
-  Gif_Color transparent_color;
+  Gif_Color transparent_color= {0};
   unsigned long ntransparent = 0;
   unsigned long nbackground = 0;
   int x, y, i;
@@ -633,10 +633,10 @@ hash_color(int red, int green, int blue,
 	new_cm_grayscale = 0;
   }
 
-  /* find the closest color in the new colormap */
+  if (new_cm)/* find the closest color in the new colormap */
   {
     Gif_Color *col = new_cm->col;
-    int ncol = new_cm->ncol, i, found;
+    int ncol = new_cm->ncol, i, found=0;
     uint32_t min_dist = 0xFFFFFFFFU;
 
     if (new_cm_grayscale) {
@@ -678,6 +678,7 @@ hash_color(int red, int green, int blue,
     trav->pixel = found;
     return found;
   }
+    return 0;
 }
 
 
@@ -863,7 +864,7 @@ try_assign_transparency(Gif_Image *gfi, Gif_Colormap *old_cm, uint8_t *new_data,
   int i, j;
   int transparent = gfi->transparent;
   int new_transparent = -1;
-  Gif_Color transp_value;
+  Gif_Color transp_value={0};
 
   if (transparent < 0)
     return 0;
