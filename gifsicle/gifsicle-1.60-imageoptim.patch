diff --git a/src/dmalloc.c b/src/dmalloc.c
index f1eff10..34d1ec9 100644
--- a/src/dmalloc.c
+++ b/src/dmalloc.c
@@ -11,7 +11,7 @@ typedef struct bucket {
 #define NBUCK 5779
 static bucket *buckets[NBUCK];
 static int event_number;
-static FILE *verbose_out = 0;
+#define verbose_out 0
 
 size_t dmalloc_live_memory;
 
@@ -24,7 +24,7 @@ debug_malloc_id(size_t k, const char *file, int line)
   int bnum = (((long)p) >> 4) % NBUCK;
 
   if (p == 0) {
-    fprintf(stderr, "dmalloc:%s:%d: virtual memory exhausted (wanted %d)\n",
+    fprintf(stderr, "dmalloc:%s:%d: virtual memory exhausted (wanted %ld)\n",
 	    file, line, k);
     abort();
   }
@@ -38,7 +38,7 @@ debug_malloc_id(size_t k, const char *file, int line)
   p = (void *)(((char *)p) + sizeof(bucket));
   /* memset(p, 99, b->size); */
   if (verbose_out)
-    fprintf(verbose_out, "%5d: %p +%-7d (%s:%d) ++  %d\n", event_number,
+    fprintf(verbose_out, "%5d: %p +%-7ld (%s:%d) ++  %ld\n", event_number,
 	    p, b->size, file, line, dmalloc_live_memory);
   event_number++;
   return p;
@@ -63,12 +63,12 @@ debug_realloc_id(void *p, size_t k, const char *file, int line)
 
   dmalloc_live_memory += k - b->size;
   if (verbose_out)
-    fprintf(verbose_out, "%5d: %p +%-7d (%s:%d) >> ", event_number,
+    fprintf(verbose_out, "%5d: %p +%-7ld (%s:%d) >> ", event_number,
 	    p, b->size, b->file, b->line);
 
   new_b = (bucket *)realloc(b, k + sizeof(bucket));
   if (new_b == 0) {
-    fprintf(stderr, "dmalloc:%s:%d: virtual memory exhausted (wanted %d)\n",
+    fprintf(stderr, "dmalloc:%s:%d: virtual memory exhausted (wanted %ld)\n",
 	    file, line, k);
     abort();
   }
@@ -86,7 +86,7 @@ debug_realloc_id(void *p, size_t k, const char *file, int line)
   }
 
   if (verbose_out)
-    fprintf(verbose_out, "%p +%-7d (%s:%d)\n", p, k, file, line);
+    fprintf(verbose_out, "%p +%-7ld (%s:%d)\n", p, k, file, line);
   event_number++;
   return p;
 }
@@ -114,7 +114,7 @@ debug_free_id(void *p, const char *file, int line)
   else buckets[bnum] = b->next;
   /* memset(p, 97, b->size); */
   if (verbose_out)
-    fprintf(verbose_out, "%5d: %p +%-7d (%s:%d) -- %s:%d  %d\n", event_number,
+    fprintf(verbose_out, "%5d: %p +%-7ld (%s:%d) -- %s:%d  %ld\n", event_number,
 	    p, b->size, b->file, b->line, file, line, dmalloc_live_memory);
   event_number++;
   free(b_in);
@@ -158,7 +158,7 @@ dmalloc_info(void *p)
     if (b == 0) {
       fprintf(stderr, "dmalloc: %p: not my pointer\n", p);
     } else {
-      fprintf(stderr, "dmalloc: %p +%-7d (%s:%d)\n",
+      fprintf(stderr, "dmalloc: %p +%-7ld (%s:%d)\n",
 	      p, b->size, b->file, b->line);
     }
   }
@@ -170,10 +170,10 @@ dmalloc_report(void)
 {
   int i;
   bucket *b;
-  fprintf(stderr, "dmalloc: %d bytes allocated\n", dmalloc_live_memory);
+  fprintf(stderr, "dmalloc: %ld bytes allocated\n", dmalloc_live_memory);
   for (i = 0; i < NBUCK; i++)
     for (b = buckets[i]; b; b = b->next)
-      fprintf(stderr, "dmalloc: %p +%-7d (%s:%d)\n",
+      fprintf(stderr, "dmalloc: %p +%-7ld (%s:%d)\n",
 	      (void *)(((char *)b) + sizeof(bucket)), b->size,
 	      b->file, b->line);
 }
@@ -182,8 +182,4 @@ dmalloc_report(void)
 void
 dmalloc_verbose(const char *out_name)
 {
-  if (out_name)
-    verbose_out = fopen(out_name, "w");
-  else
-    verbose_out = stdout;
 }
diff --git a/src/gifsicle.c b/src/gifsicle.c
index 9c00fe2..cbcf53d 100644
--- a/src/gifsicle.c
+++ b/src/gifsicle.c
@@ -694,7 +694,7 @@ input_stream(const char *name)
   def_frame = old_def_frame;
 
   if (unoptimizing)
-    if (!Gif_FullUnoptimize(gfs, GIF_UNOPTIMIZE_SIMPLEST_DISPOSAL)) {
+    if (0) {
       static int context = 0;
       warning("'%s' is too complex to unoptimize", name);
       if (!context) {
@@ -1277,16 +1277,7 @@ main(int argc, char *argv[])
   dmalloc_verbose("fudge");
 #endif
 
-  /* Yep, I'm an idiot.
-     GIF dimensions are unsigned 16-bit integers. I assume that these
-     numbers will fit in an 'int'. This assertion tests that assumption.
-     Really I should go through & change everything over, but it doesn't
-     seem worth my time. */
-  {
-    uint16_t m = 0xFFFFU;
-    int i = m;
-    assert(i > 0 && "configuration/lameness failure! bug the author!");
-  }
+
 
   while (1) {
     int opt = Clp_Next(clp);
diff --git a/src/gifwrite.c b/src/gifwrite.c
index d481e83..c3d7b3b 100644
--- a/src/gifwrite.c
+++ b/src/gifwrite.c
@@ -174,7 +174,7 @@ write_compressed_data(uint8_t **img, uint16_t width, uint16_t height,
 
   Gif_Node *work_node;
   Gif_Node *next_node;
-  Gif_Code next_code;
+  Gif_Code next_code=0;
   Gif_Code output_code;
   Gif_Code clear_code;
   Gif_Code eoi_code;
@@ -291,6 +291,8 @@ write_compressed_data(uint8_t **img, uint16_t width, uint16_t height,
 	next_node->suffix = suffix;
 	next_node->child.s = 0;
 
+          if (work_node) {
+
 	/* link next_node into work_node's set of children */
 	if (work_node->type == TABLE_TYPE)
 	  work_node->child.m[suffix] = next_node;
@@ -303,7 +305,8 @@ write_compressed_data(uint8_t **img, uint16_t width, uint16_t height,
 	  change_node_to_table(gfc, work_node, next_node, clear_code);
 
 	/* Output the current code. */
-	output_code = work_node->code;
+              output_code = work_node->code;
+          }
 	work_node = &gfc->nodes[suffix];
 	goto found_output_code;
       }
diff --git a/src/quantize.c b/src/quantize.c
index 6c91104..60352b3 100644
--- a/src/quantize.c
+++ b/src/quantize.c
@@ -101,7 +101,7 @@ histogram(Gif_Stream *gfs, int *nhist_store)
 {
   Gif_Histogram hist;
   Gif_Color *linear;
-  Gif_Color transparent_color;
+  Gif_Color transparent_color= {0};
   unsigned long ntransparent = 0;
   unsigned long nbackground = 0;
   int x, y, i;
@@ -633,10 +633,10 @@ hash_color(int red, int green, int blue,
 	new_cm_grayscale = 0;
   }
 
-  /* find the closest color in the new colormap */
+  if (new_cm)/* find the closest color in the new colormap */
   {
     Gif_Color *col = new_cm->col;
-    int ncol = new_cm->ncol, i, found;
+    int ncol = new_cm->ncol, i, found=0;
     uint32_t min_dist = 0xFFFFFFFFU;
 
     if (new_cm_grayscale) {
@@ -678,6 +678,7 @@ hash_color(int red, int green, int blue,
     trav->pixel = found;
     return found;
   }
+    return 0;
 }
 
 
@@ -863,7 +864,7 @@ try_assign_transparency(Gif_Image *gfi, Gif_Colormap *old_cm, uint8_t *new_data,
   int i, j;
   int transparent = gfi->transparent;
   int new_transparent = -1;
-  Gif_Color transp_value;
+  Gif_Color transp_value={0};
 
   if (transparent < 0)
     return 0;
